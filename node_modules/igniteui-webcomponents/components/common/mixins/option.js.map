{"version":3,"file":"option.js","sourceRoot":"","sources":["../../../../src/components/common/mixins/option.ts"],"names":[],"mappings":";;;;;;AAAA,OAAO,EAAE,UAAU,EAAE,IAAI,EAAE,MAAM,KAAK,CAAC;AACvC,OAAO,EAAE,QAAQ,EAAE,kBAAkB,EAAE,MAAM,mBAAmB,CAAC;AAEjE,OAAO,EAAE,KAAK,EAAE,MAAM,wBAAwB,CAAC;AAE/C,MAAM,OAAgB,0BAA2B,SAAQ,UAAU;IAOjE,IAAc,gBAAgB;QAC5B,OAAO,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC,IAAI,EAAE,EAAE,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;IAChE,CAAC;IA8BD,IAAW,KAAK;QACd,OAAO,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,IAAI,CAAC,gBAAgB,CAAC;IAC3D,CAAC;IAED,IAAW,KAAK,CAAC,KAAa;QAC5B,MAAM,GAAG,GAAG,IAAI,CAAC,MAAM,CAAC;QACxB,IAAI,CAAC,MAAM,GAAG,KAAK,CAAC;QACpB,IAAI,CAAC,aAAa,CAAC,OAAO,EAAE,GAAG,CAAC,CAAC;IACnC,CAAC;IAGS,cAAc;QACtB,IAAI,CAAC,UAAU,CAAC,YAAY,GAAG,GAAG,IAAI,CAAC,QAAQ,EAAE,CAAC;IACpD,CAAC;IAGS,cAAc;QACtB,IAAI,CAAC,UAAU,CAAC,YAAY,GAAG,GAAG,IAAI,CAAC,QAAQ,EAAE,CAAC;QAClD,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC,QAAQ,CAAC;IAC9B,CAAC;IAED;QACE,KAAK,EAAE,CAAC;QA7CH,WAAM,GAAG,KAAK,CAAC;QAOf,aAAQ,GAAG,KAAK,CAAC;QAOjB,aAAQ,GAAG,KAAK,CAAC;QAgCtB,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC,eAAe,EAAE,CAAC;QACzC,IAAI,CAAC,UAAU,CAAC,IAAI,GAAG,QAAQ,CAAC;IAClC,CAAC;IAEe,iBAAiB;QAG/B,KAAK,CAAC,iBAAiB,EAAE,CAAC;QAC1B,IAAI,CAAC,IAAI,GAAG,QAAQ,CAAC;IACvB,CAAC;IAEkB,MAAM;QACvB,OAAO,IAAI,CAAA;;;;;;;;;;KAUV,CAAC;IACJ,CAAC;CACF;AAjFW;IADT,kBAAkB,CAAC,EAAE,OAAO,EAAE,IAAI,EAAE,CAAC;4DACF;AAW7B;IADN,QAAQ,CAAC,EAAE,IAAI,EAAE,OAAO,EAAE,OAAO,EAAE,IAAI,EAAE,CAAC;0DACrB;AAOf;IADN,QAAQ,CAAC,EAAE,IAAI,EAAE,OAAO,EAAE,OAAO,EAAE,IAAI,EAAE,CAAC;4DACnB;AAOjB;IADN,QAAQ,CAAC,EAAE,IAAI,EAAE,OAAO,EAAE,OAAO,EAAE,IAAI,EAAE,CAAC;4DACnB;AASxB;IADC,QAAQ,EAAE;uDAGV;AASS;IADT,KAAK,CAAC,UAAU,CAAC;gEAGjB;AAGS;IADT,KAAK,CAAC,UAAU,CAAC;gEAIjB","sourcesContent":["import { LitElement, html } from 'lit';\nimport { property, queryAssignedNodes } from 'lit/decorators.js';\n\nimport { watch } from '../decorators/watch.js';\n\nexport abstract class IgcBaseOptionLikeComponent extends LitElement {\n  protected _internals: ElementInternals;\n  protected _value!: string;\n\n  @queryAssignedNodes({ flatten: true })\n  protected _content!: Array<Element>;\n\n  protected get _contentSlotText() {\n    return this._content.map((node) => node.textContent).join('');\n  }\n\n  /**\n   * Whether the item is active.\n   * @attr\n   */\n  @property({ type: Boolean, reflect: true })\n  public active = false;\n\n  /**\n   * Whether the item is disabled.\n   * @attr\n   */\n  @property({ type: Boolean, reflect: true })\n  public disabled = false;\n\n  /**\n   * Whether the item is selected.\n   * @attr\n   */\n  @property({ type: Boolean, reflect: true })\n  public selected = false;\n\n  /**\n   * The current value of the item.\n   * If not specified, the element's text content is used.\n   *\n   * @attr\n   */\n  @property()\n  public get value(): string {\n    return this._value ? this._value : this._contentSlotText;\n  }\n\n  public set value(value: string) {\n    const old = this._value;\n    this._value = value;\n    this.requestUpdate('value', old);\n  }\n\n  @watch('disabled')\n  protected disabledChange() {\n    this._internals.ariaDisabled = `${this.disabled}`;\n  }\n\n  @watch('selected')\n  protected selectedChange() {\n    this._internals.ariaSelected = `${this.selected}`;\n    this.active = this.selected;\n  }\n\n  constructor() {\n    super();\n    this._internals = this.attachInternals();\n    this._internals.role = 'option';\n  }\n\n  public override connectedCallback(): void {\n    // R.K. Workaround for Axe accessibility unit tests.\n    // I guess it does not support ElementInternals ARIAMixin state yet\n    super.connectedCallback();\n    this.role = 'option';\n  }\n\n  protected override render() {\n    return html`\n      <section part=\"prefix\">\n        <slot name=\"prefix\"></slot>\n      </section>\n      <section part=\"content\">\n        <slot></slot>\n      </section>\n      <section part=\"suffix\">\n        <slot name=\"suffix\"></slot>\n      </section>\n    `;\n  }\n}\n"]}