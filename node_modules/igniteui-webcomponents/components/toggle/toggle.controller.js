import { igcToggle } from './toggle.directive.js';
export class IgcToggleController {
    get abortController() {
        if (this._abortController.signal.aborted) {
            this._abortController = new AbortController();
        }
        return this._abortController;
    }
    set target(value) {
        this._target = value;
        this.update();
    }
    get target() {
        return this._target;
    }
    constructor(host, config) {
        this.initialScrollTop = 0;
        this.initialScrollLeft = 0;
        this._abortController = new AbortController();
        this.blockScroll = (event) => {
            event.preventDefault();
            if (!this.sourceElement || this.sourceElement !== event.target) {
                this.sourceElement = event.target;
                this.initialScrollTop =
                    this.sourceElement.scrollTop ??
                        this.sourceElement.firstElementChild?.scrollTop;
                this.initialScrollLeft =
                    this.sourceElement.scrollLeft ??
                        this.sourceElement.firstElementChild?.scrollLeft;
            }
            this.sourceElement.scrollTop = this.initialScrollTop;
            this.sourceElement.scrollLeft = this.initialScrollLeft;
            if (this.sourceElement.firstElementChild) {
                this.sourceElement.firstElementChild.scrollTop = this.initialScrollTop;
                this.sourceElement.firstElementChild.scrollLeft = this.initialScrollLeft;
            }
        };
        this.documentClicked = (event) => {
            if (!this.host.keepOpenOnOutsideClick) {
                const tree = event.composed ? event.composedPath() : [event.target];
                if (tree.includes(this.host) || tree.includes(this.target)) {
                    return;
                }
                this.hide();
            }
        };
        this.handleScroll = (event) => {
            switch (this.host.scrollStrategy) {
                case 'scroll':
                    break;
                case 'block':
                    this.blockScroll(event);
                    break;
                case 'close':
                    this.hide();
                    break;
            }
        };
        (this.host = host).addController(this);
        if (config?.target) {
            this._target = config.target;
        }
        if (config?.closeCallback) {
            this._hide = config.closeCallback;
        }
        this.update();
    }
    hostDisconnected() {
        this.abortController.abort();
    }
    update() {
        this.toggleDirective = igcToggle(this.target, this.host, this);
        this.configureListeners();
    }
    hide() {
        this._hide ? this._hide() : this.host.hide();
    }
    addEventListeners() {
        const options = {
            capture: true,
            signal: this.abortController.signal,
        };
        if (!this.host.keepOpenOnOutsideClick) {
            document.addEventListener('click', this.documentClicked, options);
        }
        document.addEventListener('scroll', this.handleScroll, options);
    }
    configureListeners() {
        this.host.open ? this.addEventListeners() : this.abortController.abort();
    }
}
//# sourceMappingURL=toggle.controller.js.map